name: Reusable Docker Blue-Green Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: string
      container_prefix:
        description: 'Container name prefix'
        required: true
        type: string
      container_port:
        description: 'Container port'
        required: false
        default: '3000'
        type: string
      health_check_timeout:
        description: 'Health check timeout in seconds'
        required: false
        default: '300'
        type: string
      notification_enabled:
        description: 'Enable deployment notifications'
        required: false
        default: true
        type: boolean
    secrets:
      CLOUDFLARE_TUNNEL_TOKEN:
        description: 'Cloudflare tunnel token'
        required: true
      EMAIL_USER:
        description: 'Email user for notifications'
        required: false
      EMAIL_PASS:
        description: 'Email password for notifications'
        required: false

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    concurrency:
      group: deploy-${{ inputs.environment }}
      cancel-in-progress: false
    
    env:
      CLOUDFLARED_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      CONTAINER_PREFIX: ${{ inputs.container_prefix }}
      CONTAINER_PORT: ${{ inputs.container_port }}
    
    outputs:
      deployment_status: ${{ steps.deployment_result.outputs.status }}
      deployed_slot: ${{ steps.determine_slots.outputs.deploy_slot }}
      deployment_time: ${{ steps.deployment_result.outputs.time }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
    
    - name: 🔧 Setup Docker Compose Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.docker/cli-plugins/docker-compose
          /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yml') }}
        restore-keys: |
          ${{ runner.os }}-docker-
    
    - name: 📋 Pre-deployment Validation
      id: validation
      run: |
        echo "🔍 Validating deployment environment..."
        
        # Check if required files exist
        if [ ! -f "docker-compose.yml" ]; then
          echo "❌ docker-compose.yml not found!"
          exit 1
        fi
        
        # Check if Docker daemon is running
        if ! docker info >/dev/null 2>&1; then
          echo "❌ Docker daemon is not running!"
          exit 1
        fi
        
        echo "✅ Pre-deployment validation passed"
        echo "validated=true" >> $GITHUB_OUTPUT
    
    - name: 🧹 Clean Up Target Container Only (Zero Downtime)
      run: |
        echo "🧹 Preparing deployment..."
        
        # Single container deployment - no blue-green needed
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        
        echo "🎯 Target container: ${CONTAINER_NAME}"
        
        # Remove the existing container if it exists
        echo "🛑 Removing existing container: ${CONTAINER_NAME}"
        docker rm -f "${CONTAINER_NAME}" 2>/dev/null || true
        
        # REMOVED: Dangerous container prune command that was removing live containers
        # We'll only remove what we explicitly want to remove
        
        echo "✅ Container cleanup completed"
    
    - name: 🔧 Verify Configuration
      run: |
        echo "✅ Single container deployment configuration verified"
    
    - name: 🌐 Ensure Core Infrastructure
      run: |
        echo "🚀 Ensuring nginx and cloudflared are running..."
        docker compose up -d --remove-orphans nginx
        
        # Enhanced health check with timeout
        timeout_seconds=60
        elapsed=0
        
        while [ $elapsed -lt $timeout_seconds ]; do
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' portfolio-nginx 2>/dev/null || echo "starting")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "✅ Nginx is healthy!"
            docker compose up -d --remove-orphans cloudflared
            break
          fi
          echo "⏳ Waiting for Nginx to be healthy... (Status: ${HEALTH_STATUS})"
          sleep 6
          elapsed=$((elapsed + 6))
        done
        
        if [ $elapsed -ge $timeout_seconds ]; then
          echo "❌ Nginx failed to start within timeout. Check logs."
          docker compose logs nginx
          exit 1
        fi
    
    - name: 🎯 Confirm Deployment Target
      id: determine_slots
      run: |
        # Single container deployment
        echo "🎯 Deploying to: ${{ env.CONTAINER_PREFIX }}"
        
        # Set container name for consistency with existing code
        echo "DEPLOY_SLOT=portfolio" >> $GITHUB_ENV
        echo "live_slot=portfolio" >> $GITHUB_OUTPUT
        echo "deploy_slot=portfolio" >> $GITHUB_OUTPUT
    
    - name: 🔍 Validate Current Environment
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        echo "🔍 Validating current environment: ${CONTAINER_NAME}"
        
        # Check if container exists and is running
        if docker ps -q -f name="${CONTAINER_NAME}" | grep -q .; then
          # Container is running, check health status
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "none")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "✅ Current container is healthy and serving traffic!"
          else
            echo "⚠️ Current container is running but not healthy (Status: ${HEALTH_STATUS})"
            echo "🔄 Will replace with new deployment..."
          fi
        else
          echo "ℹ️ No existing container found - will deploy new one"
        fi
    
    - name: 🔨 Build and Deploy New Version
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        echo "🚀 Building and deploying ${CONTAINER_NAME}..."
        
        # Build with cache
        DOCKER_BUILDKIT=1 docker compose build --build-arg BUILDKIT_INLINE_CACHE=1 portfolio
        
        # Deploy the new version with orphan removal
        docker compose up -d --force-recreate --remove-orphans portfolio
        
        echo "✅ New version deployed to ${CONTAINER_NAME}"
    
    - name: 🔍 Wait for New Environment Health
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        timeout_seconds=${{ inputs.health_check_timeout }}
        elapsed=0
        
        echo "🔍 Waiting for ${CONTAINER_NAME} to become healthy..."
        
        while [ $elapsed -lt $timeout_seconds ]; do
          HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "starting")
          if [ "${HEALTH_STATUS}" == "healthy" ]; then
            echo "✅ ${CONTAINER_NAME} is healthy!"
            break
          fi
          echo "⏳ Waiting... (Status: ${HEALTH_STATUS}) - ${elapsed}s elapsed"
          sleep 10
          elapsed=$((elapsed + 10))
        done
        
        if [ $elapsed -ge $timeout_seconds ]; then
          echo "❌ ${CONTAINER_NAME} failed to become healthy. Aborting."
          docker compose logs portfolio
          exit 1
        fi
    
    - name: 🔄 Verify Deployment Success
      run: |
        echo "🔄 Verifying deployment success..."
        
        # Verify the new environment is healthy
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "none")
        
        if [ "${HEALTH_STATUS}" == "healthy" ]; then
          echo "✅ Deployment successful! New environment is healthy."
        else
          echo "❌ New environment is not healthy after deployment."
          echo "❌ Deployment failed"
          exit 1
        fi
    
    - name: 🧹 Clean Up Old Images
      run: |
        echo "🧹 Cleaning up old images..."
        
        # Clean up old images (keep last 2 versions)
        docker image prune -f --filter "until=72h" || true
    
    - name: 🔍 Final Deployment Validation
      run: |
        echo "🔍 Performing final deployment validation..."
        
        # Verify the new environment is still healthy
        CONTAINER_NAME="${{ env.CONTAINER_PREFIX }}"
        HEALTH_STATUS=$(docker inspect --format '{{.State.Health.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo "none")
        
        if [ "${HEALTH_STATUS}" != "healthy" ]; then
          echo "❌ Final validation failed - new environment is not healthy"
          exit 1
        fi
        
        # Verify nginx is serving traffic correctly
        NGINX_STATUS=$(docker inspect --format '{{.State.Health.Status}}' portfolio-nginx 2>/dev/null || echo "none")
        if [ "${NGINX_STATUS}" != "healthy" ]; then
          echo "❌ Final validation failed - nginx is not healthy"
          exit 1
        fi
        
        echo "✅ Final validation passed - deployment successful!"
    
    - name: 📊 Deployment Summary
      id: deployment_result
      run: |
        echo "🎉 Deployment complete!"
        echo "📈 Deployment Summary:"
        echo "  • Environment: ${{ inputs.environment }}"
        echo "  • Container: ${{ env.CONTAINER_PREFIX }}"
        echo "  • Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        
        docker compose ps
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
    
    - name: 📧 Send Notification
      if: ${{ inputs.notification_enabled && always() }}
      run: |
        if [ "${{ steps.deployment_result.outputs.status }}" = "success" ]; then
          STATUS_EMOJI="✅"
          STATUS_TEXT="SUCCESS"
        else
          STATUS_EMOJI="❌"
          STATUS_TEXT="FAILED"
        fi
        
        echo "${STATUS_EMOJI} Deployment ${STATUS_TEXT} for ${{ inputs.environment }}"
        echo "Container: ${{ env.CONTAINER_PREFIX }}"
        echo "Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
